apply plugin: 'jacoco'

android {
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            //noinspection GroovyAssignabilityCheck
            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled false
                    html.enabled true
                }

                //Directory where the compiled class files are
                classDirectories =
                        fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}/com/aleksandersh/weather",
                                excludes: [
                                        '**/testSources/*',
                                        '**/testUtils/*',
                                        '**/testUtils/*',
                                        '**/build/generated/*',
                                        '**/di/*',
                                        '**/data/model/storable',
                                        '**/data/model/transferable',
                                        '**/storage/*',
                                        '**/R$*.class',
                                        '**/*$ViewInjector*.*',
                                        '**/*$ViewBinder*.*',
                                        '**/BuildConfig.*',
                                        '**/Manifest*.*',
                                        '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                        '**/*_ViewBinding.*',
                                        // Autogenerated
                                        '**/*Module.*',
                                        '**/*Component.*',
                                        '**/*Subcomponent.*',
                                        '**/*Dagger*.*',
                                        '**/*MembersInjector*.*',
                                        '**/*_Provide*Factory*.*',
                                        '**/*_Factory.*',
                                        // Room files
                                        '**/*_Impl*.*',
                                        '**/*Dao*.*',
                                ])

                sourceDirectories = files(["src/main/java",
                                           "src/$productFlavorName/java",
                                           "src/$buildTypeName/java"])

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

            }
        }
    }
}